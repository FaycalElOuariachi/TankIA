'''This code was generated for python (with the numpy package) use, compiled by Compiler.py and generated with numpyGenerator.py.
It shouldn't be altered here'''

import numpy as np
'''Generated on : 11/25/15 16:39'''


################################################################################
# 2015-11-25 16:39:36 : Tests/genAsia.py generated from config.yaml
#
# This file is generated by metaGenBayes 1.0.0 for numpy>1.10
#
# Do not make changes to this file unless you know what you are doing
# Please modify the configuration file (config.yaml) instead.
################################################################################


def getProbaForAsia(evs):
	res = {}
riable('tuberculos_or_cancer?','tuberculos_or_cancer?',2)
  v3 = gum.LabelizedVariable('positive_XraY?','positive_XraY?',2)
  v4 = gum.LabelizedVariable('lung_cancer?','lung_cancer?',2)
  v5 = gum.LabelizedVariable('smoking?','smoking?',2)
  v6 = gum.LabelizedVariable('bronchitis?','bronchitis?',2)
  v7 = gum.LabelizedVariable('dyspnoea?','dyspnoea?',2)
  P0sachant = gum.Potential()
  P0sachant.add(v0)
  P0sachant[:] = np.array([0.009999999776482582, 0.9900000095367432])
  P1sachant0 = gum.Potential()
  P1sachant0.add(v1)
  P1sachant0.add(v0)
  P1sachant0[:] = np.array([[0.05000000074505806, 0.949999988079071], [0.009999999776482582, 0.9900000095367432]])
  P2sachant1_4 = gum.Potential()
  P2sachant1_4.add(v2)
  P2sachant1_4.add(v4)
  P2sachant1_4.add(v1)
  P2sachant1_4[:] = np.array([[[1.0, 0.0], [1.0, 0.0]], [[1.0, 0.0], [0.0, 1.0]]])
  P3sachant2 = gum.Potential()
  P3sachant2.add(v3)
  P3sachant2.add(v2)
  P3sachant2[:] = np.array([[0.9800000190734863, 0.019999999552965164], [0.05000000074505806, 0.949999988079071]])
  P4sachant5 = gum.Potential()
  P4sachant5.add(v4)
  P4sachant5.add(v5)
  P4sachant5[:] = np.array([[0.10000000149011612, 0.8999999761581421], [0.009999999776482582, 0.9900000095367432]])
  P5sachant = gum.Potential()
  P5sachant.add(v5)
  P5sachant[:] = np.array([0.5, 0.5])
  P6sachant5 = gum.Potential()
  P6sachant5.add(v6)
  P6sachant5.add(v5)
  P6sachant5[:] = np.array([[0.6000000238418579, 0.4000000059604645], [0.30000001192092896, 0.699999988079071]])
  P7sachant6_2 = gum.Potential()
  P7sachant6_2.add(v7)
  P7sachant6_2.add(v6)
  P7sachant6_2.add(v2)
  P7sachant6_2[:] = np.array([[[0.8999999761581421, 0.10000000149011612], [0.699999988079071, 0.30000001192092896]], [[0.800000011920929, 0.20000000298023224], [0.10000000149011612, 0.8999999761581421]]])
  __PHI__2_3_c0=gum.Potential()
  __PHI__2_3_c0.add(v2)
  __PHI__2_3_c0.add(v3)
  __PHI__2_3_c0.fill(1)
  __PHI__2_6_7_c1=gum.Potential()
  __PHI__2_6_7_c1.add(v2)
  __PHI__2_6_7_c1.add(v6)
  __PHI__2_6_7_c1.add(v7)
  __PHI__2_6_7_c1.fill(1)
  __PHI__0_1_c2=gum.Potential()
  __PHI__0_1_c2.add(v0)
  __PHI__0_1_c2.add(v1)
  __PHI__0_1_c2.fill(1)
  __PHI__1_2_4_c3=gum.Potential()
  __PHI__1_2_4_c3.add(v1)
  __PHI__1_2_4_c3.add(v2)
  __PHI__1_2_4_c3.add(v4)
  __PHI__1_2_4_c3.fill(1)
  __PHI__2_5_6_c4=gum.Potential()
  __PHI__2_5_6_c4.add(v2)
  __PHI__2_5_6_c4.add(v5)
  __PHI__2_5_6_c4.add(v6)
  __PHI__2_5_6_c4.fill(1)
  __PHI__2_4_5_c5=gum.Potential()
  __PHI__2_4_5_c5.add(v2)
  __PHI__2_4_5_c5.add(v4)
  __PHI__2_4_5_c5.add(v5)
  __PHI__2_4_5_c5.fill(1)
  __PHI__0_1_c2.multiplicateBy(P0sachant)
  __PHI__0_1_c2.multiplicateBy(P1sachant0)
  __PHI__1_2_4_c3.multiplicateBy(P2sachant1_4)
  __PHI__2_3_c0.multiplicateBy(P3sachant2)
  __PHI__2_4_5_c5.multiplicateBy(P4sachant5)
  __PHI__2_5_6_c4.multiplicateBy(P5sachant)
  __PHI__2_5_6_c4.multiplicateBy(P6sachant5)
  __PHI__2_6_7_c1.multiplicateBy(P7sachant6_2)
  EV_5=gum.Potential()
  EV_5.add(v5)
  EV_5[:]=evs.get([5, 'smoking?'][1])
  EV_0=gum.Potential()
  EV_0.add(v0)
  EV_0[:]=evs.get([0, 'visit_to_Asia?'][1])
  EV_7=gum.Potential()
  EV_7.add(v7)
  EV_7[:]=evs.get([7, 'dyspnoea?'][1])
  EV_3=gum.Potential()
  EV_3.add(v3)
  EV_3[:]=evs.get([3, 'positive_XraY?'][1])
  __PHI__0_1_c2.multiplicateBy(EV_0)
  __PHI__2_3_c0.multiplicateBy(EV_3)
  __PHI__2_5_6_c4.multiplicateBy(EV_5)
  __PHI__2_6_7_c1.multiplicateBy(EV_7)
  __PHI__2_5_6_to__PHI__2_4_5_c4=gum.Potential()
  __PHI__2_5_6_to__PHI__2_4_5_c4.add(v2)
  __PHI__2_5_6_to__PHI__2_4_5_c4.add(v5)
  __PHI__2_5_6_to__PHI__2_4_5_c4.add(v6)
  __PHI__2_5_6_to__PHI__2_4_5_c4.fill(1)
  __PHI__2_5_6_to__PHI__2_4_5_c4.multiplicateBy(__PHI__2_5_6_c4)
  __PHI__2_4_5_to__PHI__1_2_4_c5=gum.Potential()
  __PHI__2_4_5_to__PHI__1_2_4_c5.add(v2)
  __PHI__2_4_5_to__PHI__1_2_4_c5.add(v4)
  __PHI__2_4_5_to__PHI__1_2_4_c5.add(v5)
  __PHI__2_4_5_to__PHI__1_2_4_c5.fill(1)
  __PHI__2_4_5_to__PHI__1_2_4_c5.multiplicateBy(__PHI__2_4_5_c5)
  __PHI__1_2_4_tar=gum.Potential()
  __PHI__1_2_4_tar.add(v1)
  __PHI__1_2_4_tar.add(v2)
  __PHI__1_2_4_tar.add(v4)
  __PHI__1_2_4_tar.fill(1)
  __PHI__1_2_4_tar.multiplicateBy(__PHI__1_2_4_c3)
  __PHI__2_4_5_tar=gum.Potential()
  __PHI__2_4_5_tar.add(v2)
  __PHI__2_4_5_tar.add(v4)
  __PHI__2_4_5_tar.add(v5)
  __PHI__2_4_5_tar.fill(1)
  __PHI__2_4_5_tar.multiplicateBy(__PHI__2_4_5_c5)
  __PSI__2_6_7_xx2_5_6_c1_1c2_4=gum.Potential()
  __PSI__2_6_7_xx2_5_6_c1_1c2_4.add(v2)
  __PSI__2_6_7_xx2_5_6_c1_1c2_4.add(v6)
  __PSI__2_6_7_xx2_5_6_c1_1c2_4.marginalize(__PHI__2_6_7_c1)
  __PHI__2_5_6_c4.multiplicateBy(__PSI__2_6_7_xx2_5_6_c1_1c2_4)
  __PSI__0_1_xx1_2_4_c1_2c2_3=gum.Potential()
  __PSI__0_1_xx1_2_4_c1_2c2_3.add(v1)
  __PSI__0_1_xx1_2_4_c1_2c2_3.marginalize(__PHI__0_1_c2)
  __PHI__1_2_4_c3.multiplicateBy(__PSI__0_1_xx1_2_4_c1_2c2_3)
  __PSI__1_2_4_xx2_4_5_c1_3c2_5=gum.Potential()
  __PSI__1_2_4_xx2_4_5_c1_3c2_5.add(v2)
  __PSI__1_2_4_xx2_4_5_c1_3c2_5.add(v4)
  __PSI__1_2_4_xx2_4_5_c1_3c2_5.marginalize(__PHI__1_2_4_c3)
  __PHI__2_4_5_c5.multiplicateBy(__PSI__1_2_4_xx2_4_5_c1_3c2_5)
  __PSI__2_4_5_xx2_5_6_c1_5c2_4=gum.Potential()
  __PSI__2_4_5_xx2_5_6_c1_5c2_4.add(v2)
  __PSI__2_4_5_xx2_5_6_c1_5c2_4.add(v5)
  __PSI__2_4_5_xx2_5_6_c1_5c2_4.marginalize(__PHI__2_4_5_c5)
  __PHI__2_5_6_c4.multiplicateBy(__PSI__2_4_5_xx2_5_6_c1_5c2_4)
  __PSI__2_3_xx2_5_6_c1_0c2_4=gum.Potential()
  __PSI__2_3_xx2_5_6_c1_0c2_4.add(v2)
  __PSI__2_3_xx2_5_6_c1_0c2_4.marginalize(__PHI__2_3_c0)
  __PHI__2_5_6_c4.multiplicateBy(__PSI__2_3_xx2_5_6_c1_0c2_4)
  __PHI__2_5_6_to__PHI__2_4_5_c4.multiplicateBy(__PSI__2_6_7_xx2_5_6_c1_1c2_4)
  __PHI__2_5_6_to__PHI__2_4_5_c4.multiplicateBy(__PSI__2_3_xx2_5_6_c1_0c2_4)
  __PSI__2_5_6_xx2_4_5_c1_4c2_5=gum.Potential()
  __PSI__2_5_6_xx2_4_5_c1_4c2_5.add(v2)
  __PSI__2_5_6_xx2_4_5_c1_4c2_5.add(v5)
  __PSI__2_5_6_xx2_4_5_c1_4c2_5.marginalize(__PHI__2_5_6_to__PHI__2_4_5_c4)
  __PHI__2_4_5_to__PHI__1_2_4_c5.multiplicateBy(__PSI__2_5_6_xx2_4_5_c1_4c2_5)
  __PSI__2_4_5_xx1_2_4_c1_5c2_3=gum.Potential()
  __PSI__2_4_5_xx1_2_4_c1_5c2_3.add(v2)
  __PSI__2_4_5_xx1_2_4_c1_5c2_3.add(v4)
  __PSI__2_4_5_xx1_2_4_c1_5c2_3.marginalize(__PHI__2_4_5_to__PHI__1_2_4_c5)
  __PHI__1_2_4_tar.multiplicateBy(__PSI__2_4_5_xx1_2_4_c1_5c2_3)
  __PHI__1_2_4_tar.multiplicateBy(__PSI__0_1_xx1_2_4_c1_2c2_3)
  __PHI__2_4_5_tar.multiplicateBy(__PSI__1_2_4_xx2_4_5_c1_3c2_5)
  __PHI__2_4_5_tar.multiplicateBy(__PSI__2_5_6_xx2_4_5_c1_4c2_5)
  P_6=gum.Potential()
  P_6.add(v6)
  P_6.marginalize(__PHI__2_5_6_c4)
  P_6.normalize()
  res['bronchitis?']=np.copy(P_6[:])
  P_1=gum.Potential()
  P_1.add(v1)
  P_1.marginalize(__PHI__1_2_4_tar)
  P_1.normalize()
  res['tuberculosis?']=np.copy(P_1[:])
  P_4=gum.Potential()
  P_4.add(v4)
  P_4.marginalize(__PHI__2_4_5_tar)
  P_4.normalize()
  res['lung_cancer?']=np.copy(P_4[:])
  return res